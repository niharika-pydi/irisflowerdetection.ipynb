# prompt: mount
from google.colab import drive
drive.mount('/content/drive')

# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 1: Load the Dataset
from google.colab import files
uploaded = files.upload()  # Upload iris.csv manually
df = pd.read_csv("iris.csv")

# Step 2: Exploratory Data Analysis (EDA)
print(df.info())  # Check for missing values & data types
print(df.describe())  # Summary statistics
print(df['species'].value_counts())  # Class distribution

# Pairplot for feature relationships
sns.pairplot(df, hue="species")
plt.show()

# Boxplot to check outliers
plt.figure(figsize=(10, 5))
sns.boxplot(data=df.drop(columns=['species']))
plt.title("Feature Distribution")
plt.show()

# Step 3: Data Preprocessing
le = LabelEncoder()
df["species"] = le.fit_transform(df["species"])  # Convert categorical labels to numeric

X = df.drop(columns=["species"])
y = df["species"]

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 5: Model Training & Comparison
models = {
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "SVM": SVC(kernel='linear'),
    "KNN": KNeighborsClassifier(n_neighbors=5)
}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"{name} Accuracy: {accuracy:.4f}")

# Step 6: Hyperparameter Tuning for Random Forest
param_grid = {'n_estimators': [50, 100, 200], 'max_depth': [None, 5, 10]}
grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)
best_model = grid_search.best_estimator_
print(f"Best Parameters: {grid_search.best_params_}")

# Step 7: Model Evaluation
y_pred = best_model.predict(X_test)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix Visualization
plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()

# Step 8: Predicting on a New Sample
sample = np.array([[5.1, 3.5, 1.4, 0.2]])  # Example input
sample_scaled = scaler.transform(sample)  # Scale input data
predicted_class = le.inverse_transform(best_model.predict(sample_scaled))
print("Predicted Class:", predicted_class[0])
